// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openstack-k8s-operators/heat-operator/controllers (interfaces: OkoOpenStack)

// Package mock_controllers is a generated GoMock package.
package functional

import (
	reflect "reflect"

	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	openstack "github.com/openstack-k8s-operators/lib-common/modules/openstack"
)

// MockOkoOpenStack is a mock of OkoOpenStack interface.
type MockOkoOpenStack struct {
	ctrl     *gomock.Controller
	recorder *MockOkoOpenStackMockRecorder
}

// MockOkoOpenStackMockRecorder is the mock recorder for MockOkoOpenStack.
type MockOkoOpenStackMockRecorder struct {
	mock *MockOkoOpenStack
}

// NewMockOkoOpenStack creates a new mock instance.
func NewMockOkoOpenStack(ctrl *gomock.Controller) *MockOkoOpenStack {
	mock := &MockOkoOpenStack{ctrl: ctrl}
	mock.recorder = &MockOkoOpenStackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOkoOpenStack) EXPECT() *MockOkoOpenStackMockRecorder {
	return m.recorder
}

// CreateDomain mocks base method.
func (m *MockOkoOpenStack) CreateDomain(arg0 logr.Logger, arg1 openstack.Domain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain.
func (mr *MockOkoOpenStackMockRecorder) CreateDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockOkoOpenStack)(nil).CreateDomain), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockOkoOpenStack) CreateUser(arg0 logr.Logger, arg1 openstack.User) (string, error) {
	m.ctrl.T.Helper()
	//	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	//	ret0, _ := ret[0].(string)
	//	ret1, _ := ret[1].(error)
	//return ret0, ret1
	return "mockUserID", nil
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockOkoOpenStackMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockOkoOpenStack)(nil).CreateUser), arg0, arg1)
}
